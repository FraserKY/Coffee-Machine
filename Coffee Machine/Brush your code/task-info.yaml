type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    """list_a = []
    list_b = []

    w = int(input('How much water do I have?'))
    m = int(input('How much milk do I have?'))
    c = int(input('How much coffee do I have?'))
    cups_requested = int(input('How many coffees do you require?'))

    # Use floor division '//' to round down
    list_b.append(w // 200)
    list_b.append(m // 50)
    list_b.append(c // 15)

    cups_available = min(list_b)

    if cups_available == cups_requested:
        print('Yes, I can make that amount of coffee')

    elif cups_available > cups_requested:
        extra = cups_available - cups_requested
        print('Yes, I can make that amount of coffee (and even ', int(extra), ' more than that)')

    elif cups_available < cups_requested:
        print('No, I can make only ', cups_available, ' cups of coffee')"""

    water = 400
    milk = 540
    coffee = 120
    cups = 9
    money = 550


    def print_contents():
        global water, milk, coffee, cups, money
        print('The coffee machine has:')
        print(water, ' of water')
        print(milk, ' of milk')
        print(coffee, ' of coffee beans')
        print(cups, ' of disposable cups')
        print('$', money, ' of money\n')


    def check_resource(wa, m, c):
        global water, milk, coffee, cups
        if wa > water:
            return 'water'
        elif m > milk:
            return 'milk'
        elif c > coffee:
            return 'coffee'
        elif cups < 1:
            return 'cups'
        else:
            return 1


    while True:
        n = input('Write action (buy, fill, take, remaining, exit)')

        if n == 'fill':
            w = int(input('Write how many ml of water do you want to add:'))
            water = water + w

            w = int(input('Write how many ml of milk do you want to add:'))
            milk = milk + w

            w = int(input('Write how many grams of coffee beans do you want to add:'))
            coffee = coffee + w

            w = int(input('Write how many disposable cups do you want to add:'))
            cups = cups + w

        elif n == 'take':
            print('I gave you $', money, '\n')
            money = 0

        elif n == 'buy':
            w = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:')

            if w == '1':
                check = check_resource(250, 0, 16)
                if check == 1:
                    print('I have enough resources, making you a coffee!')
                    water = water - 250
                    coffee = coffee - 16
                    money = money + 4
                    cups = cups - 1
                else:
                    print('Sorry, not enough', check, '!')

            elif w == '2':
                check = check_resource(350, 75, 20)
                if check == 1:
                    print('I have enough resources, making you a coffee!')
                    water = water - 350
                    milk = milk - 75
                    coffee = coffee - 20
                    money = money + 7
                    cups = cups - 1
                else:
                    print('Sorry, not enough', check, '!')

            elif w == '3':
                check = check_resource(200, 100, 12)
                if check == 1:
                    print('I have enough resources, making you a coffee!')
                    water = water - 200
                    milk = milk - 100
                    coffee = coffee - 12
                    money = money + 6
                    cups = cups - 1
                else:
                    print('Sorry, not enough', check, '!')

            elif w == 'back':
                continue

        elif n == 'remaining':
            print_contents()

        elif n == 'exit':
            break
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
